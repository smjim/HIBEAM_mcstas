/*******************************************************************************
* Component: (VENBLA)
*
* %I
* Written by: James Rogers (jroger87@vols.utk.edu)
* Date: Jan 5, 2023
* Origin: University of Tennessee, Knoxville
* Version: 1.0
*
* %D
* Models a differential neutron focusing device using
* a series of mirrors to reflect neutrons to target
*
* Neutron-reflective horizontal blades of equal angle spacing from source,
* with a gap in the middle to allow passage of on-course neutrons
* Blades are angled such that ray from source to center of blade will be
* deflected towards center of target
*
* Similar concept to 'nested reflector' used in X-Ray astonomy, but instead
* using flat surfaces to account for vx, vy deviation independently
*
* %P
* INPUT PARAMETERS:
*
* zvb: [m]	z position of vb
* zdet: [m]	z position of detector
* ydet: [m] y position of detector
* len: [m]	blade length (z)
* thickness: [m]	thickness of 'dead zone' substrate (y)
* hvb: [m]	height of vb array (y)
* wvb: [m]	width of vb array (x)
* hdet: [m]	height of detector (y)
* mi: [1]	m value of material
* reflect: [str]	Name of reflectivity file. Format q(nm-1) R(0-1). Leave "0" for 100% reflectivity
*
* %L
* See also <A HREF="https://www.desmos.com/calculator/hln2tu6ozw">Desmos interactive model
*
*
* %End
*
*******************************************************************************/

DEFINE COMPONENT Venbla
DEFINITION PARAMETERS ()
SETTING PARAMETERS (string reflect=0, zvb, zdet, ydet=0, len=0.30, thickness = 0.002,
	hvb, wvb, hdet, mi=6)
/* Neutron parameters: (x,y,z,vx,vy,vz,t,sx,sy,sz,p) */
SHARE
%{
	%include "read_table-lib"
	%include "ref-lib"
%}

DECLARE
%{
	t_Table pTable;

	/* total number of blades in vb array */
	int numBlades;

	/* vb generated for angles between these two ranges on either side */
	double outer_angle;
	double inner_angle;

	/* y position and angular rotation of blades */
	DArray1d y_vals;
	DArray1d angles;

	/* normal vectors to blade surface */
	DArray1d norm_y;
	DArray1d norm_z;
%}

INITIALIZE
%{
	/* checking for errors */
	if (zdet < 2.*zvb)
		{ fprintf(stderr,"vb: %s: Error: invalid focus distance\n", NAME_CURRENT_COMP); exit(-1); }
	if (zvb*zdet*len*thickness*hdet*hvb*wvb == 0)
		{ fprintf(stderr,"vb: error: %s has one of zvb,zdet,len,thickness,hdet,hvb null.\n", NAME_CURRENT_COMP); exit(-1); }

	if (reflect && strlen(reflect) && strcmp(reflect,"NULL") && strcmp(reflect,"0")) {
		if (Table_Read(&pTable, reflect, 1) <= 0) /* read 1st block data from file into pTable */
			exit(fprintf(stderr,"Mirror: %s: can not read file %s\n", NAME_CURRENT_COMP, reflect));
	}

	/* defining geometry */
	// assume that there will be less than 1000 blades total
	y_vals = create_darr1d(1000);
	angles = create_darr1d(1000);
	norm_y = create_darr1d(1000);
	norm_z = create_darr1d(1000);

	/* inner angle, outer angle for vb blades */
	inner_angle = atan((hdet/2.)/zdet);
	outer_angle = atan((hvb/2.)/zvb);

	/* define top blade */
	int i = 0;
	y_vals[i] = hvb/2.;													// center of blade = (zvb, hvb/2.)
	angles[i] = 0.5*(atan((hvb/2.)/zvb) - atan((hvb/2.)/(zdet-zvb)));	// mirror angle required for reflection to (zdet, 0)

	/* define upper blade array */
	fprintf(stderr,"# inner angle: %f, outer angle: %f\n", inner_angle, outer_angle); 
	while ((inner_angle <= atan(y_vals[i]/(zvb))) && (atan(y_vals[i]/(zvb)) <= outer_angle))
	{
		i += 1;

		// angle for ray to max z of previous blade (bottom right accounting for thickness)
		double theta = atan( ( y_vals[i-1] + (len/2.)*tan(angles[i-1]) - (thickness/2.)*cos(angles[i-1]) ) / (zvb + len/2.));

		// top left of new blade (accounting for thickness)
		double y0 = (zvb-(len/2.))*tan(theta);
		y0 -= thickness;

		double yrc = y0;				// yrc is y center of reflection on blade, initially defined for angle=0
		double yrctmp = yrc+1;			// yrctmp is previous yrc, used to determine when to end loop. Define initial as arbitrarily greater
		double ysrc = 0;				// placeholder for y pos of source

		while ((0.000001 < (yrctmp-yrc)) || ((yrctmp-yrc) < -0.000001))	//\<<
		{
			yrctmp = yrc;

			double delta = 0.5*(atan((zdet-zvb)/(yrc))-atan((zvb)/(yrc-ysrc)));
			yrc = y0+tan(delta)*(len/2.);
		}
		angles[i] = atan((yrc-y0)/(len/2.));
		y_vals[i] = yrc + (thickness/2.)*cos(angles[i]);		// y_vals stores center of blade, not center of reflective surface
	}

	numBlades = 2*i;
	fprintf(stderr,"# numBlades: %d\n", numBlades); 

	// write over blade i, it is lower than <inner_angle> 
	for (int j = 0; j < i; j++)
	{
		// define lower blades
		angles[j+i] = -angles[j];
		y_vals[j+i] = -y_vals[j];
	}

	/* targeted reflection */
	fprintf(stderr,"# i, angles[i], y_vals[i], d_angle\n");
	for (int j = 0; j < numBlades; j++)
	{
		/* if j<i, reflecting surface on bottom of blade
			if j>= i, reflecting surface on top of blade */
		double yrc;
		if (j<i)
			yrc = y_vals[j] - (thickness/2.)*cos(angles[j]);
		if (i<=j)
			yrc = y_vals[j] + (thickness/2.)*cos(angles[j]);

		/* zvb != zrc because blades are rotated about center of blade, 
			zrc = zvb + (thickness/2.)*abs(sin(angles[j])).
			approximation of zrc=zvb is valid for small angles[], small thickness */

		// shift all blades by d_angle to target reflection to (zdet, ydet)
		double d_angle = 0.5*(atan(yrc/(zdet-zvb)) - atan((yrc-ydet)/(zdet-zvb)));
		angles[j] += d_angle;
		
		fprintf(stderr,"%d %f %f %f\n", j, angles[j], y_vals[j], d_angle);
	}

	if (y_vals[i]>y_vals[i-1]-thickness)
		fprintf(stderr,"ERROR: blade overlap! max overlap @center=%f\n", y_vals[i]-(y_vals[i-1]-thickness)); 
	if (numBlades > 999)
		fprintf(stderr,"ERROR: numBlades greater than blade limit!\n"); 

	/* normal vector for blade surface (y, z) */
	for (int j=0; j<i; j++)
	{
		// norm vectors for top array point down, for bottom array point up
		norm_y[j] = -cos(angles[j]);
		norm_z[j] = sin(angles[j]);
		norm_y[j+i] = cos(angles[j+i]); 
		norm_z[j+i] = -sin(angles[j+i]);
	}
%}

TRACE
%{
	/* placeholder values for translation, rotation of VB blades */
	double t0, t1, yp, zp, vyp, vzp;
	double tmp;
	/* values for reflection */
	double q, B;

	/* loop through all blade angles to check for interactions */
	for (int i=0; i<numBlades; i++)
	{

		/* 'mirror' intersection: */
		
		/* translation */
		/* center of mirror is slightly offset from center of blade */
		double theta = angles[i];
		yp = y - (y_vals[i]-(thickness/2.)*cos(theta));
		zp = z - (thickness/2.)*sin(theta);
		/* rotation */
		/* rotate vectors by -theta for box_intersect to consider 
			vb 'box' as if rotated by +theta */
		tmp = zp*cos(-theta) - yp*sin(-theta);
		yp = zp*sin(-theta) + yp*cos(-theta);
		zp = tmp;
		vzp = vz*cos(-theta) - vy*sin(-theta);
		vyp = vz*sin(-theta) + vy*cos(-theta);

		double mirror_thickness = 0.00001; // 0.01 mm - arbitrarily small thickness of reflective mirror
		if (box_intersect(&t0, &t1, x, yp, zp, vx, vyp, vzp, wvb, mirror_thickness, len)) {
			if (t1>=0) {
				PROP_DT(t0);
				double vi = vy*norm_y[i] + vz*norm_z[i];	// calculate incident velocity (scalar_prod(v,norm))
				q = fabs(2*vi*V2Q);							// calculate q[Ã…-1] given v[m/s]

				// look up reflection probability given momentum
				if (reflect && strlen(reflect) && strcmp(reflect,"NULL") && strcmp(reflect,"0"))
					TableReflecFunc(q, &pTable, &B);
			
				// absorb, update prob given vi calculation
				if (B <= 0) ABSORB;
				p *= B;
				SCATTER;

				// reflect neutron around normal vector 
				double n_dot_v = vy*norm_y[i] + vz*norm_z[i]; 
				vy = vy - 2*n_dot_v*norm_y[i];
				vz = vz - 2*n_dot_v*norm_z[i];
			}
		}

		/* 'dead zone' intersection: */

		/* translation */
		yp = y - y_vals[i];
		zp = z - 0;
		/* rotation */
		theta = -angles[i];
		tmp = zp*cos(-theta) - yp*sin(-theta);
		yp = zp*sin(-theta) + yp*cos(-theta);
		zp = tmp;

		if (box_intersect(&t0, &t1, x, yp, zp, vx, vyp, vzp, wvb, thickness, len)) {
			if (t1>=0) {
				PROP_DT((t1+t0)/2);
				SCATTER;
				ABSORB;
			}
		}
	}

%}

MCDISPLAY
%{
	for (int i=0; i<numBlades; i++)
	{	
		// center of box = (0, yp, zp)
		double yp = y_vals[i];
		double zp = 0; 
		double theta = angles[i];

		/* absorbers */
		double xp, ypy, ypz, zpy, zpz;
		double ytmp, ztmp;
		xp = wvb/2.;
		ypy = 0.5*thickness;
		zpz = 0.5*len;
		ypz = 0; zpy = 0;

		// rotate vectors yp, zp by (theta, 0, 0)
		/* y:(0,.5*thickness,0)	-> yp:(0,ypy,ypz)
		   z:(0,0,.5*len)		-> zp:(0,zpy,zpz) */
		ytmp = ypz*cos(theta) - ypy*sin(theta); 
		ypy = ypz*sin(theta) + ypy*cos(theta); 
		ypz = ytmp;
		ztmp = zpz*cos(theta) - zpy*sin(theta); 
		zpy = zpz*sin(theta) + zpy*cos(theta); 
		zpz = ztmp;

		// use vector addition with yp, zp to create vertices of box
		// drawing all 12 edges of a rectangle traversing 8 vertices
		multiline(8,-xp, yp-ypy-zpy, zp-ypz-zpz,
					-xp, yp-ypy+zpy, zp-ypz+zpz,
					+xp, yp-ypy+zpy, zp-ypz+zpz,
					+xp, yp-ypy-zpy, zp-ypz-zpz,
					-xp, yp-ypy-zpy, zp-ypz-zpz,
					-xp, yp+ypy-zpy, zp+ypz-zpz,
					+xp, yp+ypy-zpy, zp+ypz-zpz,
					+xp, yp-ypy-zpy, zp-ypz-zpz );
		multiline(4,-xp, yp-ypy+zpy, zp-ypz+zpz,
					-xp, yp+ypy+zpy, zp+ypz+zpz,
					+xp, yp+ypy+zpy, zp+ypz+zpz,
					+xp, yp-ypy+zpy, zp-ypz+zpz );
		multiline(4,-xp, yp+ypy-zpy, zp+ypz-zpz,
					-xp, yp+ypy+zpy, zp+ypz+zpz,
					+xp, yp+ypy+zpy, zp+ypz+zpz,
					+xp, yp+ypy-zpy, zp+ypz-zpz );

		// line from point source to blade bottom right (shows full solid angle covering geometry)
		//line(0, 0, zp-zvb, 
		//	0, yp-ypy+zpy, zp+ypz+zpz);
		
		/* reflectors */
		// different color (red?), only on bottom surface of blades
	}
%}

END
